-- ----------------------------------------------------------------------------------------------------
DECLARE
    @DATE1 VARCHAR (10) = /*<PAYMENT_DATE1>*/DATEFROMPARTS(YEAR(CURRENT_TIMESTAMP) + CASE WHEN MONTH(CURRENT_TIMESTAMP)>7 THEN 0 ELSE -1 END,7,1)/*</PAYMENT_DATE1>*/
  , @DATE2 VARCHAR (10) = /*<PAYMENT_DATE2>*/DATEFROMPARTS(YEAR(CURRENT_TIMESTAMP) + CASE WHEN MONTH(CURRENT_TIMESTAMP)>7 THEN 1 ELSE 0 END,6,30)/*</PAYMENT_DATE2>*/
  ;
-- ----------------------------------------------------------------------------------------------------
WITH
-- ----------------------------------------------------------------------------------------------------
cte_payments AS(
SELECT
  -- >>>> From BATCH_ITEM_SPLIT
  B1.SERIALNUMBER
  , B1.PAYMENTAMOUNT , B1.GSTAMOUNT , B1.PAYMENTAMOUNTNETT
  , B1.SOURCECODE, B1.SOURCECODE2
  , B1.DESTINATIONCODE, B1.DESTINATIONCODE2

  -- >>>> From BATCH_ITEM
--   , B2.ENVELOPESALUTATION
--   , CASE WHEN UPPER(LTRIM(RTRIM(B2.ADDRESSLINE4))) IN ('VIC','NSW','SA','QLD','WA','TAS','ACT','NT')
--     THEN UPPER(LTRIM(RTRIM(B2.ADDRESSLINE4)))
--     ELSE 'OVERSEA'
--     END AS [STATE]
--   , DATEDIFF(d, B2.DATEOFBIRTH, CURRENT_TIMESTAMP )/365 AS [AGE]

  , B2.PAYMENTTYPE
  , B2.DATEOFPAYMENT
  , YEAR(B2.DATEOFPAYMENT) + CASE WHEN MONTH(B2.DATEOFPAYMENT) < 7 THEN 0 ELSE 1 END AS [PAYMENT_FY]
  , MONTH(B2.DATEOFPAYMENT) + CASE WHEN MONTH(B2.DATEOFPAYMENT) < 7 THEN 6 ELSE -6 END AS [PAYMENT_FYMTH]
  , CASE WHEN B2.REVERSED = 2
    THEN 0
    ELSE DENSE_RANK() OVER (PARTITION BY CASE WHEN B2.REVERSED IN (1, -1, 2) THEN 0 ELSE -1 END ORDER BY CONCAT(CONVERT(VARCHAR(10), B2.DATEOFPAYMENT, 112), B2.SERIALNUMBER, B2.ADMITNAME, B2.RECEIPTNO) ASC)
    END AS [TRXID]

  , CASE WHEN B2.REVERSED = 2 OR B2.REVERSED = 1 OR B2.REVERSED = -1 THEN 0 ELSE -1 END AS [ISTRX]

  , CASE WHEN
    ((MONTH(B2.DATEOFPAYMENT) + CASE WHEN MONTH(B2.DATEOFPAYMENT) < 7 THEN 6 ELSE -6 END) * 100 + DAY(B2.DATEOFPAYMENT)) <=
    ((MONTH(CURRENT_TIMESTAMP) + CASE WHEN MONTH(CURRENT_TIMESTAMP) < 7 THEN 6 ELSE -6 END) * 100 + DAY(CURRENT_TIMESTAMP))
    THEN -1
    ELSE 0
    END AS [ISLTD]

  , CASE WHEN LTRIM(RTRIM(B2.MANUALRECEIPTNO)) LIKE '[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'
    THEN LTRIM(RTRIM(B2.MANUALRECEIPTNO))
    ELSE
      CASE WHEN B2.NOTES IS NOT NULL AND B2.NOTES LIKE '%REX Order Number: [0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%'
      THEN SUBSTRING(B2.NOTES, PATINDEX('%REX Order Number: [0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%', B2.NOTES) + LEN('REX Order Number:') + 1, 11)
      ELSE NULL
      END
    END AS [REXORDERID]

  -- >>>> From SOURCE_CODE Table
  , CASE WHEN S1.SOURCETYPE LIKE '%Merchandise%'
    THEN 'Merchandise Platform'
    ELSE 'Non-Merchandise Platform'
    END AS [PLATFORM]

  , CASE WHEN S1.SOURCETYPE LIKE '%Merchandise%'
    THEN 'Merchandise'
    ELSE
      CASE WHEN S1.SOURCETYPE = 'Bequest'
      THEN 'Bequest'
      ELSE 'Fundraising'
      END
    END AS [MAINSTREAM]
  , S1.SOURCETYPE , S1.ADDITIONALCODE1 AS [ACCOUNT], S1.ADDITIONALCODE5 AS [CLASS]

  -- >>>> From BATCH_ITEM)PLEDGE
  , B3.PLEDGELINENO

  -- >>>> From PLEDGE_HEADER Table
  , CASE WHEN S1.SOURCETYPE LIKE '%SPONSORSHIP%' THEN P1.PLEDGEID ELSE NULL END AS [PLEDGEID]

  , CASE WHEN S1.SOURCETYPE LIKE '%SPONSORSHIP%' AND P1.PLEDGEID IS NOT NULL
    THEN
      CASE WHEN B1.SOURCECODE = 'TLCSPON'
        THEN 'TLC' ELSE
      CASE WHEN B1.SOURCECODE IN ('SACTIONP','ACTCRA','ACTCRM','SCEDU')
        THEN 'ACTION PARTNER' ELSE
      CASE WHEN B1.SOURCECODE = 'SPERSON'
        THEN 'PERSONAL SUPPORT' ELSE
      CASE WHEN B1.SOURCECODE IN ('SCOUNTRY','SPNEPAL','SPNG', 'SNIGER', 'SINDIA', 'STHAIL', 'SNIGERIA', 'SMYANM', 'AETIMO', 'SETIMOR', 'SNIGERIA', 'SCHINA', 'SCONGO')
        THEN 'COUNTRY SUPPORT' ELSE
      CASE WHEN B1.SOURCECODE LIKE '%SCURE%' OR B1.SOURCECODE IN ('CUREONE1', 'CUREONE2')
        THEN 'CURE ONE' ELSE 'UNCATEGORIZED'
      END END END END END
    ELSE NULL END AS [PLEDGETYPE1]

  , CASE WHEN S1.SOURCETYPE LIKE '%SPONSORSHIP%' AND P1.PLEDGEID IS NOT NULL
    THEN P1.PLEDGERECRUITEDBY
    ELSE NULL
    END AS [RECRUITMENT]

  -- >>>> From SOURCECODE AND PLEDGE_HEADER Table
  , CASE WHEN S1.ADDITIONALCODE3 IS NULL OR RTRIM(S1.ADDITIONALCODE3) = '' OR S1.ADDITIONALCODE3 LIKE '%Unsolicited%'
    THEN
      CASE WHEN S1.SOURCETYPE LIKE '%SPONSORSHIP%' AND P1.PLEDGEID IS NOT NULL
      THEN
        CASE WHEN P1.RECRUITMENTMETHOD IS NULL OR RTRIM(P1.RECRUITMENTMETHOD) = '' OR P1.RECRUITMENTMETHOD LIKE '%Unsolicited%'
        THEN '____.Unsolicited'
        ELSE P1.RECRUITMENTMETHOD
        END
      ELSE '____.Unsolicited'
      END
    ELSE S1.ADDITIONALCODE3
    END AS [CAMPAIGNCODE]

FROM
  TBL_BATCHITEMSPLIT                            B1
  LEFT OUTER JOIN TBL_BATCHITEM                 B2 ON (B1.SERIALNUMBER = B2.SERIALNUMBER) AND (B1.RECEIPTNO = B2.RECEIPTNO) AND (B1.ADMITNAME = B2.ADMITNAME)
  LEFT OUTER JOIN TBL_BATCHITEMPLEDGE           B3 ON (B1.SERIALNUMBER = B3.SERIALNUMBER) AND (B1.RECEIPTNO = B3.RECEIPTNO) AND (B1.ADMITNAME = B3.ADMITNAME) AND (B1.LINEID = B3.LINEID)
  LEFT OUTER JOIN TBL_PLEDGEHEADER              P1 ON (B3.PLEDGEID = P1.PLEDGEID)
--   LEFT OUTER JOIN TBL_PLEDGEINSTALMENTS_CLOSED  P2 ON (B3.PLEDGEID = P1.PLEDGEID) AND (B3.PLEDGELINENO = P2.INSTALMENTID)
  LEFT OUTER JOIN TBL_BATCHHEADER               B4 ON (B2.ADMITNAME = B4.ADMITNAME)
  LEFT OUTER JOIN Tbl_SOURCECODE                S1 ON (B1.SOURCECODE = S1.SOURCECODE)
WHERE
  (B2.REVERSED IS NULL OR NOT(B2.REVERSED IN (1, -1))) AND (B4.STAGE ='Batch Approved')
  AND B2.DATEOFPAYMENT BETWEEN @DATE1 AND @DATE2
)
-- ----------------------------------------------------------------------------------------------------
, cte_previous_date AS (
  SELECT B2.SERIALNUMBER
    , MIN(B2.DATEOFPAYMENT) AS [PREVIOUS_FIRST_DATE]
    , MAX(B2.DATEOFPAYMENT) AS [PREVIOUS_LAST_DATE]
    , MAX(CASE WHEN B2.DATEOFPAYMENT < DATEFROMPARTS(YEAR(@DATE1) + CASE WHEN MONTH(@DATE1) <7 THEN 0 ELSE 1 END-2,7,1) THEN B2.DATEOFPAYMENT ELSE NULL END) AS [PREVIOUS_BEFROE_LFY_LAST_DATE]
    , YEAR(MIN(B2.DATEOFPAYMENT)) + CASE WHEN MONTH(MIN(B2.DATEOFPAYMENT)) <7 THEN 0 ELSE 1 END AS [PREVIOUS_FIRST_DATE_FY]
    , YEAR(MAX(B2.DATEOFPAYMENT)) + CASE WHEN MONTH(MAX(B2.DATEOFPAYMENT)) <7 THEN 0 ELSE 1 END AS [PREVIOUS_LAST_DATE_FY]
    , YEAR(
        MAX(CASE WHEN B2.DATEOFPAYMENT < DATEFROMPARTS(YEAR(@DATE1) + CASE WHEN MONTH(@DATE1) <7 THEN 0 ELSE 1 END-2,7,1) THEN B2.DATEOFPAYMENT ELSE NULL END)
      ) + CASE WHEN MONTH(
        MAX(CASE WHEN B2.DATEOFPAYMENT < DATEFROMPARTS(YEAR(@DATE1) + CASE WHEN MONTH(@DATE1) <7 THEN 0 ELSE 1 END-2,7,1) THEN B2.DATEOFPAYMENT ELSE NULL END)
      ) <7 THEN 0 ELSE 1 END AS [PREVIOUS_BEFROE_LFY_LAST_DATE_FY]
  FROM TBL_BATCHITEM B2
  WHERE (B2.REVERSED IS NULL OR NOT(B2.REVERSED IN (1, -1, 2))) AND B2.DATEOFPAYMENT <  @DATE1
  GROUP BY B2.SERIALNUMBER
  HAVING B2.SERIALNUMBER IN (SELECT [SERIALNUMBER] FROM TBL_BATCHITEM WHERE [DATEOFPAYMENT] BETWEEN  @DATE1 AND @DATE2 GROUP BY [SERIALNUMBER])
)
-- ----------------------------------------------------------------------------------------------------
/*<BASE_QUERY>*/
select t1.*
  , t2.PREVIOUS_FIRST_DATE
  , t2.PREVIOUS_BEFROE_LFY_LAST_DATE
  , t2.PREVIOUS_LAST_DATE
  , t2.PREVIOUS_FIRST_DATE_FY
  , t2.PREVIOUS_BEFROE_LFY_LAST_DATE_FY
  , t2.PREVIOUS_LAST_DATE_FY
  , CASE WHEN
      MONTH(@DATE1) = 7 AND DAY(@DATE1) =1
      AND YEAR(@DATE1) + CASE WHEN MONTH(@DATE1) <7 THEN 0 ELSE 1 END = YEAR(@DATE2) + CASE WHEN MONTH(@DATE2) <7 THEN 0 ELSE 1 END
    THEN
      CASE WHEN t2.PREVIOUS_LAST_DATE_FY IS NULL
      THEN '1NEW'
      ELSE
        CASE WHEN t2.PREVIOUS_LAST_DATE_FY < t1.PAYMENT_FY - 1
        THEN '1REC'
        ELSE
          CASE WHEN t2.PREVIOUS_FIRST_DATE_FY = t1.PAYMENT_FY - 1
          THEN '2NEW'
          ELSE
            CASE WHEN t2.PREVIOUS_BEFROE_LFY_LAST_DATE_FY < t2.PREVIOUS_LAST_DATE_FY -1
            THEN '2REC'
            ELSE 'MULTI'
            END
          END
        END
      END
    ELSE 'N/A' END AS [LINE_FY_DONTYPE1]
from
  cte_payments t1
  left join cte_previous_date t2 on (t1.SERIALNUMBER = t2.SERIALNUMBER)
/*</BASE_QUERY>*/
-- ----------------------------------------------------------------------------------------------------
-- OPTION(RECOMPILE)
-- ----------------------------------------------------------------------------------------------------